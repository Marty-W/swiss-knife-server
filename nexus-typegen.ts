/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./src/context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  AuthPayload: { // root type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: {};
  PomodoroSession: { // root type
    actualDuration: number; // Int!
    assumedDuration: number; // Int!
    byUserId: string; // String!
    endTime?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: {};
  Task: { // root type
    byUserId: string; // String!
    completed: boolean; // Boolean!
    createdBy?: NexusGenRootTypes['User'] | null; // User
    dueOn: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    tags?: string[] | null; // [String!]
    title: string; // String!
  }
  User: { // root type
    email: string; // String!
    id: string; // String!
    password: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthPayload: { // field return type
    token: string; // String!
    user: NexusGenRootTypes['User']; // User!
  }
  Mutation: { // field return type
    changeTaskTitle: NexusGenRootTypes['Task'] | null; // Task
    createTask: NexusGenRootTypes['Task'] | null; // Task
    markTaskDone: NexusGenRootTypes['Task'] | null; // Task
    signin: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    signup: NexusGenRootTypes['AuthPayload'] | null; // AuthPayload
    undoTask: NexusGenRootTypes['Task'] | null; // Task
  }
  PomodoroSession: { // field return type
    actualDuration: number; // Int!
    assumedDuration: number; // Int!
    byUserId: string; // String!
    endTime: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  Query: { // field return type
    allTasks: NexusGenRootTypes['Task'][] | null; // [Task!]
    user: NexusGenRootTypes['User'] | null; // User
  }
  Task: { // field return type
    byUserId: string; // String!
    completed: boolean; // Boolean!
    createdBy: NexusGenRootTypes['User'] | null; // User
    dueOn: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    tags: string[] | null; // [String!]
    title: string; // String!
  }
  User: { // field return type
    email: string; // String!
    id: string; // String!
    password: string; // String!
    pomoSessions: Array<Array<NexusGenRootTypes['PomodoroSession'] | null> | null> | null; // [[PomodoroSession]]
    tasks: NexusGenRootTypes['Task'][] | null; // [Task!]
  }
}

export interface NexusGenFieldTypeNames {
  AuthPayload: { // field return type name
    token: 'String'
    user: 'User'
  }
  Mutation: { // field return type name
    changeTaskTitle: 'Task'
    createTask: 'Task'
    markTaskDone: 'Task'
    signin: 'AuthPayload'
    signup: 'AuthPayload'
    undoTask: 'Task'
  }
  PomodoroSession: { // field return type name
    actualDuration: 'Int'
    assumedDuration: 'Int'
    byUserId: 'String'
    endTime: 'DateTime'
    id: 'String'
    startTime: 'DateTime'
  }
  Query: { // field return type name
    allTasks: 'Task'
    user: 'User'
  }
  Task: { // field return type name
    byUserId: 'String'
    completed: 'Boolean'
    createdBy: 'User'
    dueOn: 'DateTime'
    id: 'String'
    tags: 'String'
    title: 'String'
  }
  User: { // field return type name
    email: 'String'
    id: 'String'
    password: 'String'
    pomoSessions: 'PomodoroSession'
    tasks: 'Task'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    changeTaskTitle: { // args
      newTitle: string; // String!
      taskId: string; // String!
    }
    createTask: { // args
      tags?: string[] | null; // [String!]
      title: string; // String!
    }
    markTaskDone: { // args
      taskId: string; // String!
    }
    signin: { // args
      email: string; // String!
      password: string; // String!
    }
    signup: { // args
      email: string; // String!
      password: string; // String!
    }
    undoTask: { // args
      taskId: string; // String!
    }
  }
  Query: {
    user: { // args
      userId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}